import React, { useState, useCallback, useMemo } from 'react';
import { EnhancedRecommendationCard } from './EnhancedRecommendationCard';
import { CVRecommendationWithPlaceholders } from '../../types/placeholders';

interface RecommendationWizardProps {
  recommendations: CVRecommendationWithPlaceholders[];
  jobId: string;
  onApplyRecommendations: (selectedRecommendationIds: string[]) => Promise<void>;
  isLoading?: boolean;
}

type WizardStep = 'review' | 'customize' | 'preview' | 'apply';

interface StepInfo {
  key: WizardStep;
  title: string;
  description: string;
  icon: React.ReactNode;
}

export const RecommendationWizard: React.FC<RecommendationWizardProps> = ({
  recommendations,
  jobId,
  onApplyRecommendations,
  isLoading = false
}) => {
  const [currentStep, setCurrentStep] = useState<WizardStep>('review');
  const [selectedRecommendationIds, setSelectedRecommendationIds] = useState<string[]>([]);
  const [customizedRecommendations, setCustomizedRecommendations] = useState<Record<string, string>>({});

  const steps: StepInfo[] = [
    {
      key: 'review',
      title: 'Review Recommendations',
      description: 'Select the improvements you want to apply to your CV',
      icon: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v2m3 0h8m-8 4h8m-8 4h8" />
        </svg>
      )
    },
    {
      key: 'customize',
      title: 'Customize Details',
      description: 'Fill in your specific information for personalized recommendations',
      icon: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
        </svg>
      )
    },
    {
      key: 'preview',
      title: 'Preview Changes',
      description: 'Review your customized improvements before applying them',
      icon: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
        </svg>
      )
    },
    {
      key: 'apply',
      title: 'Apply Changes',
      description: 'Apply the selected improvements to your CV',
      icon: (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
        </svg>
      )
    }
  ];

  const selectedRecommendations = useMemo(() => {
    return recommendations.filter(rec => selectedRecommendationIds.includes(rec.id));\n  }, [recommendations, selectedRecommendationIds]);\n\n  const recommendationsWithPlaceholders = useMemo(() => {\n    return selectedRecommendations.filter(rec => rec.placeholders && rec.placeholders.length > 0);\n  }, [selectedRecommendations]);\n\n  const uncustomizedRecommendations = useMemo(() => {\n    return recommendationsWithPlaceholders.filter(rec => !rec.isCustomized && !customizedRecommendations[rec.id]);\n  }, [recommendationsWithPlaceholders, customizedRecommendations]);\n\n  const canProceedToCustomize = selectedRecommendationIds.length > 0;\n  const canProceedToPreview = recommendationsWithPlaceholders.length === 0 || uncustomizedRecommendations.length === 0;\n  const canApplyChanges = selectedRecommendationIds.length > 0 && canProceedToPreview;\n\n  const handleRecommendationSelection = useCallback((recommendationId: string, selected: boolean) => {\n    setSelectedRecommendationIds(prev => {\n      if (selected) {\n        return [...prev, recommendationId];\n      } else {\n        return prev.filter(id => id !== recommendationId);\n      }\n    });\n  }, []);\n\n  const handleCustomizationComplete = useCallback((recommendationId: string, customizedContent: string) => {\n    setCustomizedRecommendations(prev => ({\n      ...prev,\n      [recommendationId]: customizedContent\n    }));\n  }, []);\n\n  const handleStepNavigation = useCallback((step: WizardStep) => {\n    setCurrentStep(step);\n  }, []);\n\n  const handleApplyRecommendations = useCallback(async () => {\n    try {\n      await onApplyRecommendations(selectedRecommendationIds);\n    } catch (error) {\n      console.error('Error applying recommendations:', error);\n    }\n  }, [selectedRecommendationIds, onApplyRecommendations]);\n\n  const getStepStatus = (step: WizardStep): 'current' | 'completed' | 'upcoming' => {\n    const stepIndex = steps.findIndex(s => s.key === step);\n    const currentStepIndex = steps.findIndex(s => s.key === currentStep);\n    \n    if (stepIndex < currentStepIndex) return 'completed';\n    if (stepIndex === currentStepIndex) return 'current';\n    return 'upcoming';\n  };\n\n  const renderStepIndicator = () => (\n    <nav aria-label=\"Progress\" className=\"mb-8\">\n      <ol className=\"flex items-center justify-center space-x-4 md:space-x-8\">\n        {steps.map((step, index) => {\n          const status = getStepStatus(step.key);\n          \n          return (\n            <li key={step.key} className=\"flex items-center\">\n              <button\n                onClick={() => handleStepNavigation(step.key)}\n                disabled={!canNavigateToStep(step.key)}\n                className={`\n                  flex items-center justify-center w-10 h-10 rounded-full border-2 transition-colors\n                  ${\n                    status === 'current'\n                      ? 'border-blue-600 bg-blue-600 text-white'\n                      : status === 'completed'\n                      ? 'border-green-600 bg-green-600 text-white'\n                      : 'border-gray-300 bg-white text-gray-500'\n                  }\n                  ${\n                    canNavigateToStep(step.key) && status !== 'current'\n                      ? 'hover:border-blue-400 cursor-pointer'\n                      : !canNavigateToStep(step.key)\n                      ? 'cursor-not-allowed opacity-50'\n                      : ''\n                  }\n                `}\n              >\n                {status === 'completed' ? (\n                  <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                  </svg>\n                ) : (\n                  step.icon\n                )}\n              </button>\n              \n              {index < steps.length - 1 && (\n                <div className={`\n                  w-8 md:w-16 h-0.5 ml-4\n                  ${\n                    status === 'completed' || (index + 1 < steps.findIndex(s => s.key === currentStep))\n                      ? 'bg-green-600'\n                      : 'bg-gray-300'\n                  }\n                `} />\n              )}\n            </li>\n          );\n        })}\n      </ol>\n      \n      {/* Step Title and Description */}\n      <div className=\"text-center mt-4\">\n        <h2 className=\"text-lg font-semibold text-gray-900\">\n          {steps.find(s => s.key === currentStep)?.title}\n        </h2>\n        <p className=\"text-sm text-gray-600 mt-1\">\n          {steps.find(s => s.key === currentStep)?.description}\n        </p>\n      </div>\n    </nav>\n  );\n\n  const canNavigateToStep = (step: WizardStep): boolean => {\n    switch (step) {\n      case 'review':\n        return true;\n      case 'customize':\n        return canProceedToCustomize;\n      case 'preview':\n        return canProceedToPreview;\n      case 'apply':\n        return canApplyChanges;\n      default:\n        return false;\n    }\n  };\n\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 'review':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                Select Recommendations to Apply\n              </h3>\n              <p className=\"text-sm text-gray-600 mb-6\">\n                Choose the improvements you'd like to make to your CV. You can customize them in the next step.\n              </p>\n            </div>\n            \n            <div className=\"space-y-4\">\n              {recommendations.map(recommendation => (\n                <EnhancedRecommendationCard\n                  key={recommendation.id}\n                  recommendation={recommendation}\n                  jobId={jobId}\n                  isSelected={selectedRecommendationIds.includes(recommendation.id)}\n                  onSelectionChange={handleRecommendationSelection}\n                  onCustomizationComplete={handleCustomizationComplete}\n                />\n              ))}\n            </div>\n            \n            {selectedRecommendationIds.length > 0 && (\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                <h4 className=\"text-sm font-medium text-blue-900 mb-2\">\n                  Selected: {selectedRecommendationIds.length} recommendation{selectedRecommendationIds.length > 1 ? 's' : ''}\n                </h4>\n                <p className=\"text-sm text-blue-700\">\n                  {recommendationsWithPlaceholders.length > 0\n                    ? `${recommendationsWithPlaceholders.length} recommendation${recommendationsWithPlaceholders.length > 1 ? 's' : ''} will need customization in the next step.`\n                    : 'All selected recommendations are ready to apply.'}\n                </p>\n              </div>\n            )}\n          </div>\n        );\n\n      case 'customize':\n        if (recommendationsWithPlaceholders.length === 0) {\n          return (\n            <div className=\"text-center py-12\">\n              <svg className=\"w-12 h-12 text-green-500 mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n              </svg>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Customization Needed</h3>\n              <p className=\"text-sm text-gray-600 mb-6\">\n                The recommendations you selected don't require any customization. You can proceed to preview or apply them directly.\n              </p>\n            </div>\n          );\n        }\n\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                Customize Your Recommendations\n              </h3>\n              <p className=\"text-sm text-gray-600 mb-6\">\n                Fill in your specific details to personalize the selected recommendations.\n              </p>\n            </div>\n            \n            <div className=\"space-y-8\">\n              {uncustomizedRecommendations.map(recommendation => (\n                <div key={recommendation.id} className=\"border border-gray-200 rounded-lg p-6\">\n                  <h4 className=\"text-md font-medium text-gray-900 mb-4\">\n                    {recommendation.title}\n                  </h4>\n                  <EnhancedRecommendationCard\n                    recommendation={recommendation}\n                    jobId={jobId}\n                    isSelected={true}\n                    onCustomizationComplete={handleCustomizationComplete}\n                  />\n                </div>\n              ))}\n            </div>\n            \n            {uncustomizedRecommendations.length === 0 && (\n              <div className=\"text-center py-8\">\n                <svg className=\"w-12 h-12 text-green-500 mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                </svg>\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Customization Complete!</h3>\n                <p className=\"text-sm text-gray-600\">\n                  All recommendations have been customized with your information.\n                </p>\n              </div>\n            )}\n          </div>\n        );\n\n      case 'preview':\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                Preview Your Improvements\n              </h3>\n              <p className=\"text-sm text-gray-600 mb-6\">\n                Review how your CV will look with the selected improvements before applying them.\n              </p>\n            </div>\n            \n            <div className=\"space-y-6\">\n              {selectedRecommendations.map(recommendation => (\n                <div key={recommendation.id} className=\"border border-gray-200 rounded-lg p-6\">\n                  <div className=\"flex items-start justify-between mb-4\">\n                    <div>\n                      <h4 className=\"text-md font-medium text-gray-900\">\n                        {recommendation.title}\n                      </h4>\n                      <p className=\"text-sm text-gray-600\">{recommendation.section}</p>\n                    </div>\n                    <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium text-blue-700 bg-blue-100\">\n                      +{recommendation.estimatedScoreImprovement} ATS Score\n                    </span>\n                  </div>\n                  \n                  <div className=\"bg-green-50 border border-green-200 rounded-md p-4\">\n                    <h5 className=\"text-sm font-medium text-gray-900 mb-2\">Final Content:</h5>\n                    <div className=\"text-sm text-gray-700 whitespace-pre-wrap\">\n                      {customizedRecommendations[recommendation.id] || recommendation.customizedContent || recommendation.suggestedContent}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n              <h4 className=\"text-sm font-medium text-blue-900 mb-2\">\n                Summary\n              </h4>\n              <div className=\"text-sm text-blue-700 space-y-1\">\n                <p>• {selectedRecommendationIds.length} improvements will be applied</p>\n                <p>• Estimated ATS score increase: +{selectedRecommendations.reduce((sum, rec) => sum + rec.estimatedScoreImprovement, 0)} points</p>\n                <p>• {selectedRecommendations.filter(r => r.isCustomized || customizedRecommendations[r.id]).length} recommendations have been customized</p>\n              </div>\n            </div>\n          </div>\n        );\n\n      case 'apply':\n        return (\n          <div className=\"text-center py-12\">\n            <svg className=\"w-16 h-16 text-blue-500 mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n            </svg>\n            <h3 className=\"text-xl font-medium text-gray-900 mb-4\">\n              Ready to Apply Improvements\n            </h3>\n            <p className=\"text-sm text-gray-600 mb-8\">\n              Click the button below to apply {selectedRecommendationIds.length} improvement{selectedRecommendationIds.length > 1 ? 's' : ''} to your CV.\n            </p>\n            \n            <button\n              onClick={handleApplyRecommendations}\n              disabled={isLoading}\n              className=\"inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {isLoading ? (\n                <>\n                  <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                  </svg>\n                  Applying Improvements...\n                </>\n              ) : (\n                `Apply ${selectedRecommendationIds.length} Improvement${selectedRecommendationIds.length > 1 ? 's' : ''}`\n              )}\n            </button>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  const renderNavigationButtons = () => {\n    const currentStepIndex = steps.findIndex(s => s.key === currentStep);\n    const isFirstStep = currentStepIndex === 0;\n    const isLastStep = currentStepIndex === steps.length - 1;\n    \n    return (\n      <div className=\"flex items-center justify-between pt-8 border-t border-gray-200\">\n        <button\n          onClick={() => handleStepNavigation(steps[currentStepIndex - 1].key)}\n          disabled={isFirstStep}\n          className=\"inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n          </svg>\n          Previous\n        </button>\n        \n        <div className=\"text-sm text-gray-500\">\n          Step {currentStepIndex + 1} of {steps.length}\n        </div>\n        \n        {!isLastStep && (\n          <button\n            onClick={() => handleStepNavigation(steps[currentStepIndex + 1].key)}\n            disabled={!canNavigateToStep(steps[currentStepIndex + 1].key)}\n            className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            Next\n            <svg className=\"w-4 h-4 ml-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n            </svg>\n          </button>\n        )}\n        \n        {isLastStep && (\n          <div /> // Empty div to maintain layout\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      {renderStepIndicator()}\n      \n      <div className=\"bg-white\">\n        {renderStepContent()}\n        {renderNavigationButtons()}\n      </div>\n    </div>\n  );\n};```"}